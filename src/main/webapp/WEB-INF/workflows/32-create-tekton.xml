<workflow name="create-tekton" label="New Application" description="Creates a new kubernetes namespace and associated groups to manage approvals" inList="false" orgid="B158BD40-0C1B-11E3-8FFD-0800200C9A66">
    <dynamicConfiguration dynamic="false" />
    <tasks>
        <!-- Create tekton project -->
<customTask className="com.tremolosecurity.unison.gitlab.provisioning.tasks.CreateProject">
  <param name="namespace" value="$nameSpace$-production" />
  <param name="name" value="$nameSpace$-build" />
  <param name="description" value="Build project" />
  <param name="issuesEnabled" value="true" />
  <param name="mergeRequestsEnabled" value="true" />
  <param name="wikiEnabled" value="true" />
  <param name="snipitsEnabled" value="true" />
  <param name="visibility" value="2" />
  <param name="targetName" value="gitlab" />
  <param name="gitSshHost" value="#[GITLAB_SSH_HOST]" />
  <param name="createWebhook" value="false" />
  <param name="webhookSuffix" value="#[GITLAB_WEBHOOK_SUFFIX]" />
  <param name="webhookBranchFilter" value="master" />
</customTask>

<customTask className="com.tremolosecurity.unison.gitlab.provisioning.tasks.CreateGitFile">
  <param name="targetName" value="gitlab" />
  <param name="namespace" value="$nameSpace$-production" />
  <param name="project" value="$nameSpace$-build" />
  <param name="branch" value="master" />
  <param name="path" value="README.md" />
  <param name="content">
<![CDATA[ 
# $nameSpace$-build 

Fork this project to create a build process for for $nameSpace$.  Create a pull request to deploy updates.

]]>
  </param>
  <param name="commitMessage" value="initializing the repository" />

</customTask>

<customTask className="com.tremolosecurity.argocd.tasks.CreateGitRepository">
  <param name="type" value="git" />
  <param name="name" value="$nameSpace$-build" />
  <param name="repoUrl" value="$gitSshInternalURL$" />
  <param name="sshPrivateKey" value="$gitPrivateKey$" />
  <param name="target" value="argocd" />
</customTask>

<customTask className="com.tremolosecurity.unison.gitlab.provisioning.tasks.AddGroupToProject">
  <param name="groupName" value="approvers-k8s-$nameSpace$" />
  <param name="targetName" value="gitlab" />
  <param name="accessLevel" value="MAINTAINER" />

</customTask>
<customTask className="com.tremolosecurity.unison.gitlab.provisioning.tasks.AddGroupToProject">
  <param name="groupName" value="k8s-namespace-operations-$nameSpace$" />
  <param name="targetName" value="gitlab" />
  <param name="accessLevel" value="DEVELOPER" />

</customTask>
<customTask className="com.tremolosecurity.unison.gitlab.provisioning.tasks.AddGroupToProject">
  <param name="groupName" value="k8s-namespace-developer-$nameSpace$" />
  <param name="targetName" value="gitlab" />
  <param name="accessLevel" value="DEVELOPER" />

</customTask>


        <!-- Create Build Namespace -->
        <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
{
    "kind": "Namespace",
    "apiVersion": "v1",
    "metadata": {
      "name": "$nameSpace$-build",
      "labels": {
        "name": "$nameSpace$-build",
        "type": "build",
        "env": "dev"
      }
    }
  }
]]>
          </param>
          <param name="kind" value="Namespace" />
          <param name="url" value="/api/v1/namespaces" />
        </customTask>
        <!-- Create read only secret to pull code from the application repository -->
        <customTask className="com.tremolosecurity.unison.gitlab.provisioning.tasks.CreateDeploymentKey">
          <param name="targetName" value="gitlab" />
          <param name="namespace" value="$nameSpace$-production" />
          <param name="project" value="$nameSpace$-application" />
          <param name="keyLabel" value="tekton_pull" />
          <param name="makeWriteable" value="false" />
          <param name="privateKeyReuestName" value="tektonPullecret" />
          <param name="privateKeyReuestNamePT" value="tektonPullSecretPT" />
        </customTask>


        <!-- create git pull secret -->
        <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
{
  "kind": "Secret",
  "apiVersion": "v1",
  "metadata": {
    "name": "git-pull",
    "namespace": "$nameSpace$-build",
    "annotations":{
      "tekton.dev/git-0":"#[GITLAB_SSH_HOST]"  
    }
  },
  "data": {
    "ssh-privatekey": "$tektonPullecret$"
  },
  "type": "kubernetes.io/ssh-auth"
}
]]>
          </param>
          <param name="kind" value="Secret" />
          <param name="url" value="/api/v1/namespaces/$nameSpace$-build/secrets" />
        </customTask>

        <!-- create service account for running builds -->
        <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
            {
              "apiVersion": "v1",
              "kind": "ServiceAccount",
              "metadata": {
                "name": "tekton-build",
                "namespace": "$nameSpace$-build"
              },
              "secrets": [
                {
                  "name": "git-pull"
                }
              ]
            }
]]>
          </param>
          <param name="kind" value="ServiceAccount" />
          <param name="url" value="/api/v1/namespaces/$nameSpace$-build/serviceaccounts" />
        </customTask>




        <!-- create the git input -->
        
        
        
        <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
            {
              "apiVersion": "tekton.dev/v1alpha1",
              "kind": "PipelineResource",
              "metadata": {
                "name": "git-resource",
                "namespace": "$nameSpace$-build"
              },
              "spec": {
                "type": "git",
                "params": [
                  {
                    "name": "url",
                    "value": "git@#[GITLAB_SSH_HOST]:$nameSpace$-production/$nameSpace$-application.git"
                  },
                  {
                    "name": "revision",
                    "value": "master"
                  }
                ]
              }
            }
]]>
          </param>
          <param name="kind" value="PipelineResource" />
          <param name="url" value="/apis/tekton.dev/v1alpha1/namespaces/$nameSpace$-build/pipelineresources" />
        </customTask>

        <!-- Create writeable secret so builds can update the operations repository -->
        <customTask className="com.tremolosecurity.unison.gitlab.provisioning.tasks.CreateDeploymentKey">
          <param name="targetName" value="gitlab" />
          <param name="namespace" value="$nameSpace$-dev" />
          <param name="project" value="$nameSpace$-operations" />
          <param name="keyLabel" value="tekton_push" />
          <param name="makeWriteable" value="true" />
          <param name="privateKeyReuestName" value="tektonPushSecret" />
          <param name="privateKeyReuestNamePT" value="tektonPushSecretPT" />
        </customTask>

         <!-- create git push secret -->
         <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
{
  "kind": "Secret",
  "apiVersion": "v1",
  "metadata": {
    "name": "git-write",
    "namespace": "$nameSpace$-build"
  },
  "data": {
    "ssh-privatekey": "$tektonPushSecret$"
  },
  "type": "kubernetes.io/ssh-auth"
}
]]>
          </param>
          <param name="kind" value="Secret" />
          <param name="url" value="/api/v1/namespaces/$nameSpace$-build/secrets" />
        </customTask>

    
        <!-- create trigger template -->
        <customTask className="com.tremolosecurity.unison.gitlab.provisioning.tasks.CreateGitFile">
          <param name="targetName" value="gitlab" />
          <param name="namespace" value="$nameSpace$-production" />
          <param name="project" value="$nameSpace$-build" />
          <param name="branch" value="master" />
          <param name="path" value="src/trigger-templates/gitlab-build-template.yaml" />
          <param name="content">
        <![CDATA[ 
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: gitlab-build-template
spec:
  resourcetemplates:
  - apiVersion: tekton.dev/v1alpha1
    kind: TaskRun
    metadata:
      generateName: build-$nameSpace$
    spec:
      serviceAccountName: tekton-build
               
        ]]>
          </param>
          <param name="commitMessage" value="initializing the repository" />
        
        </customTask>


        <!-- create trigger binding -->
        <customTask className="com.tremolosecurity.unison.gitlab.provisioning.tasks.CreateGitFile">
          <param name="targetName" value="gitlab" />
          <param name="namespace" value="$nameSpace$-production" />
          <param name="project" value="$nameSpace$-build" />
          <param name="branch" value="master" />
          <param name="path" value="src/trigger-bindings/gitlab-push-binding.yaml" />
          <param name="content">
        <![CDATA[ 
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: gitlab-push-binding
spec: {}
               
        ]]>
          </param>
          <param name="commitMessage" value="initializing the repository" />
        
        </customTask>
    

        <!-- create webhook secret -->
        <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
{
  "kind": "Secret",
  "apiVersion": "v1",
  "metadata": {
    "name": "gitlab-secret",
    "namespace": "$nameSpace$-build"
  },
  "data": {
    "secretToken": "$b64appProjectWebhook$"
  },
  "type": "Opaque"
}
]]>
          </param>
          <param name="kind" value="Secret" />
          <param name="url" value="/api/v1/namespaces/$nameSpace$-build/secrets" />
        </customTask>

        <!-- create service account for the webhook -->
        <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
            {
              "apiVersion": "v1",
              "kind": "ServiceAccount",
              "metadata": {
                "name": "tekton-triggers-gitlab-sa",
                "namespace": "$nameSpace$-build"
              },
              "secrets": [
                {
                  "name": "gitlab-secret"
                }
              ]
            }
]]>
          </param>
          <param name="kind" value="ServiceAccount" />
          <param name="url" value="/api/v1/namespaces/$nameSpace$-build/serviceaccounts" />
        </customTask>

        <!-- create role binding for the webhook -->
        <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
            {
              "apiVersion": "rbac.authorization.k8s.io/v1",
              "kind": "RoleBinding",
              "metadata": {
                "name": "tekton-triggers-gitlab-binding",
                "namespace": "$nameSpace$-build"
              },
              "subjects": [
                {
                  "kind": "ServiceAccount",
                  "name": "tekton-triggers-gitlab-sa"
                }
              ],
              "roleRef": {
                "apiGroup": "rbac.authorization.k8s.io",
                "kind": "ClusterRole",
                "name": "tekton-triggers-gitlab-minimal"
              }
            }
                          ]]>
          </param>
          <param name="kind" value="RoleBinding" />
          <param name="url" value="/apis/rbac.authorization.k8s.io/v1/namespaces/$nameSpace$-build/rolebindings" />
        </customTask>

        <!-- create event listener -->
        <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
            {
              "apiVersion": "triggers.tekton.dev/v1alpha1",
              "kind": "EventListener",
              "metadata": {
                "name": "gitlab-listener",
                "namespace": "$nameSpace$-build"
              },
              "spec": {
                "serviceAccountName": "tekton-triggers-gitlab-sa",
                "triggers": [
                  {
                    "name": "gitlab-push-events-trigger",
                    "interceptors": [
                      {
                        "gitlab": {
                          "secretRef": {
                            "secretName": "gitlab-secret",
                            "secretKey": "secretToken"
                          },
                          "eventTypes": [
                            "Push Hook"
                          ]
                        }
                      }
                    ],
                    "bindings": [
                      {
                        "ref": "gitlab-push-binding"
                      }
                    ],
                    "template": {
                      "name": "gitlab-build-template"
                    }
                  }
                ]
              }
            }
]]>
          </param>
          <param name="kind" value="EventListener" />
          <param name="url" value="/apis/triggers.tekton.dev/v1alpha1/namespaces/$nameSpace$-build/eventlisteners" />
        </customTask>


        <!-- create webhook route -->
        <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
            {
              "apiVersion": "route.openshift.io/v1",
              "kind": "Route",
              "metadata": {
                  "creationTimestamp": "2020-10-21T02:48:31Z",
                  "labels": {
                      "app.kubernetes.io/managed-by": "EventListener",
                      "app.kubernetes.io/part-of": "Triggers",
                      "eventlistener": "gitlab-listener"
                  },
                  "name": "gitlab-webhook",
                  "namespace": "$nameSpace$-build",
              },
              "spec": {
                  "host": "$nameSpace$-application.#[GITLAB_WEBHOOK_SUFFIX]",
                  "port": {
                      "targetPort": "http-listener"
                  },
                  "tls": {
                      "termination": "edge"
                  },
                  "to": {
                      "kind": "Service",
                      "name": "el-gitlab-listener",
                      "weight": 100
                  },
                  "wildcardPolicy": "None"
              }
          }
]]>
          </param>
          <param name="kind" value="Ingress" />
          <param name="url" value="/apis/extensions/v1beta1/namespaces/$nameSpace$-build/ingresses" />
        </customTask>


        <customTask className="com.tremolosecurity.provisioning.tasks.CreateK8sObject">
          <param name="targetName" value="k8s" />
          <param name="template">
            <![CDATA[ 
                        {
                            "kind": "RoleBinding",
                            "apiVersion": "rbac.authorization.k8s.io/v1",
                            "metadata": {
                              "name": "operations-binding",
                              "namespace": "$nameSpace$-build"
                            },
                            "subjects": [
                              {
                                "kind": "Group",
                                "name": "k8s-namespace-operations-$nameSpace$",
                                "apiGroup": "rbac.authorization.k8s.io"
                              },
                              {
                                "kind": "Group",
                                "name": "k8s-namespace-developer-$nameSpace$",
                                "apiGroup": "rbac.authorization.k8s.io"
                              }
                            ],
                            "roleRef": {
                              "kind": "ClusterRole",
                              "name": "admin",
                              "apiGroup": "rbac.authorization.k8s.io"
                            }
                          }
                          ]]>
          </param>
          <param name="kind" value="RoleBinding" />
          <param name="url" value="/apis/rbac.authorization.k8s.io/v1/namespaces/$nameSpace$-build/rolebindings" />
        </customTask>

    </tasks>
</workflow>